// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Optional, for long-lived sessions
  access_token      String? // Optional, used for making API requests
  expires_at        Int? // Unix timestamp, for when the access token expires
  token_type        String? // e.g., "Bearer"
  scope             String? // Scope of the access token
  id_token          String? // ID token returned by the provider (e.g., Google)
  session_state     String? // Optional, used by some providers for session tracking
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String       @id @default(cuid())
  name          String?
  phone         String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?

  role  UserRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  // sessions Session[]

}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
